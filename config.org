#+TITLE Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package system
  Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration. [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

  #+begin_src emacs-lisp
    (custom-set-variables
     '(gnutls-algorithm-priority "normal:-vers-tls1.3"))

    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)

    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)

    (setq use-package-always-ensure t)

  #+end_src

* Essential setup
** No littering

   #+begin_src emacs-lisp

     ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
     ;; reliably, set `user-emacs-directory` before loading no-littering!
     (setq user-emacs-directory "~/.cache/emacs")

     (use-package no-littering)

     ;; no-littering doesn't set this by default so we must place
     ;; auto save files in the same path as it uses for sessions
     (setq auto-save-file-name-transforms
           `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

   #+end_src

* Look and feel
** Basic setup
   Turn off unneeded elements to make Emacs look a lot more minimal and modern. Keep menu bar for a while, to learn some keybinding.

   #+begin_src emacs-lisp

     (setq inhibit-startup-message t)

     (scroll-bar-mode 1)  ; Disable visible scrollbar
     (tool-bar-mode -1)    ; Disable toolbar
     (tooltip-mode -1)     ; Disable tooltips
     ;(menu-bar-mode -1)    ; Disable the menu bar

     (set-fringe-mode 10)  ; Give some breathing room

     (setq visible-bell t) ; set up visible bell

   #+end_src

** Font setup
   Use my favourite font for everything: JetBrains Mono. Keep in mind that this font should be installed in your machine. For mac run this command: `brew install font-jetbrains-mono`

   #+begin_src emacs-lisp

     (set-face-attribute 'default nil :font "JetBrains Mono" :height 160)

   #+end_src

** Theme
   [[https://github.com/Brettm12345/doom-palenight-theme][doom-palenight]] is dark high contrast themes.

   #+begin_src emacs-lisp

     (use-package doom-themes
       :init (load-theme 'doom-palenight t))

   #+end_src

** Status bar
   Status bar should be minimal and pretty.

   #+begin_src emacs-lisp

     (use-package all-the-icons)

     (use-package doom-modeline
       :init (doom-modeline-mode 1)
       :custom ((doom-modeline-height 15)))

   #+end_src

** Line numbers
   Relative number could be helpful with vim key bindings.

   #+begin_src emacs-lisp

     (global-display-line-numbers-mode t)
     (dolist (mode '(term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
     (setq display-line-numbers 'relative)
     (setq display-line-numbers-type 'relative)

   #+end_src

** Column Number
   Show column number in the status bar.

   #+begin_src emacs-lisp

     (column-number-mode)

   #+end_src

** Rainbow delimiters
   [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

   #+begin_src emacs-lisp

     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))

   #+end_src

** Indentation

   #+begin_src emacs-lisp

     (setq-default indent-tabs-mode nil)
     (setq-default tabs-width 2)

   #+end_src

** Visual column
   [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] center =org-mode= buffers for a more pleasing writing experience. As it centers the contents of the buffer horizontally to seem more like you are editing a document.

   #+begin_src emacs-lisp

     (defun pk/visual-fill ()
       (setq visual-fill-column-width 120)
       (setq visual-fill-column-center-text t))

     (defun pk/org-mode-visual-fill ()
       (visual-fill-column-mode 1)
       (auto-fill-mode 0)
       (visual-line-mode 1))

     (use-package visual-fill-column
       :hook
       (visual-fill-column-mode . pk/visual-fill)
       (org-mode . pk/org-mode-visual-fill))

   #+end_src

* UI Enhancments
** Completition framework
   [[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs. It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs. Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.
   [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

   #+begin_src emacs-lisp

     (use-package ivy
       :diminish
       :bind (("C-s" . swiper)
              :map ivy-minibuffer-map
              ("TAB" . ivy-alt-done)
              ("C-l" . ivy-alt-done)
              ("C-j" . ivy-next-line)
              ("C-k" . ivy-previous-line)
              :map ivy-switch-buffer-map
              ("C-k" . ivy-previous-line)
              ("C-l" . ivy-done)
              ("C-d" . ivy-switch-buffer-kill)
              :map ivy-reverse-i-search-map
              ("C-k" . ivy-previous-line)
              ("C-d" . ivy-reverse-i-search-kill))
       :config
       (ivy-mode 1))

     (use-package ivy-rich
       :init (ivy-rich-mode 1))

     (use-package counsel
       :bind (("M-x" . counsel-M-x)
              ("C-x b" . counsel-ibuffer)
              ("C-x C-f" . counsel-find-file)
              :map minibuffer-local-map
              ("C-r" . 'counsel-minibuffer-history))
       :config
       (setq ivy-initial-inputs-alist nil))

   #+end_src

** Key bindings helper
   [[https://github.com/justbur/emacs-which-key][Which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

   #+begin_src emacs-lisp

     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))

   #+end_src

** Improved documentation
   [[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration. It is very useful for figuring out how things work in Emacs.
   #+begin_src emacs-lisp

          (use-package helpful
            :custom
            (counsel-describe-function-function #'helpful-callable)
            (counsel-describe-variable-function #'helpful-variable)
            :bind
            ([remap describe-function] . counsel-describe-function)
            ([remap describe-command] . helpful-command)
            ([remap describe-variable] . counsel-describe-variable)
            ([remap describe-key] . helpful-key)
            ([remap describe-bindings] . counsel-descbinds))

   #+end_src

* Key bindings
** Vim style
   [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
   [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

   #+begin_src emacs-lisp

     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       :config
       (evil-mode 1)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))

     (use-package evil-collection
       :after evil
       :config
       (setq evil-collection-mode-list '(2048-game ag alchemist anaconda-mode apropos arc-mode auto-package-update bm bookmark
                                                   (buff-menu "buff-menu")
                                                   calc calendar cider cmake-mode comint company compile consult
                                                   (custom cus-edit)
                                                   cus-theme dashboard daemons deadgrep debbugs debug devdocs dictionary diff-mode dired dired-sidebar disk-usage distel doc-view docker ebib edbi edebug ediff eglot explain-pause-mode elfeed elisp-mode elisp-refs elisp-slime-nav embark emms epa ert eshell eval-sexp-fu evil-mc eww fanyi finder flycheck flymake free-keys geiser ggtags git-timemachine gnus go-mode grep guix hackernews helm help helpful hg-histedit hungry-delete ibuffer image image-dired image+ imenu imenu-list
                                                   (indent "indent")
                                                   indium info ivy js2-mode leetcode lispy log-edit log-view lsp-ui-imenu lua-mode kotlin-mode macrostep man magit magit-todos markdown-mode monky mpdel mu4e mu4e-conversation neotree newsticker notmuch nov
                                                   (occur replace)
                                                   omnisharp org-present zmusic osx-dictionary outline p4
                                                   (package-menu package)
                                                   pass
                                                   (pdf pdf-view)
                                                   popup proced
                                                   (process-menu simple)
                                                   prodigy profiler python quickrun racer racket-describe realgud reftex restclient rg ripgrep rjsx-mode robe rtags ruby-mode scroll-lock sh-script simple slime sly speedbar tab-bar tablist tabulated-list tar-mode telega
                                                   (term term ansi-term multi-term)
                                                   tetris thread tide timer-list transmission trashed tuareg typescript-mode vc-annotate vc-dir vc-git vdiff view vlf w3m wdired wgrep which-key woman xref youtube-dl
                                                   (ztree ztree-diff)
                                                   xwidget))
       (evil-collection-init))

   #+end_src

** Global key bindings
   [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.

   #+begin_src emacs-lisp

     (use-package general
       :config
       (general-evil-setup t)
       (general-create-definer rune/leader-keys
         :keymaps '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "M-SPC")

       (rune/leader-keys
         "a"  '(:ignore t :which-key "toggles")
         "at" '(toggle-truncate-lines :which-key "truncate lines")
         "aw" '(whitespace-mode :which-key "whitespace")
         "ac" '(visual-fill-column-mode :which-key "visual column")
         "f" '(projectile-find-file :which-key "find file")
         "t" '(projectile-ripgrep :which-key "find text")
         "e" '(dired-jump :which-key "dired")
         "j" '(flymake-goto-next-error :which-key "next error")
         "k" '(flymake-goto-prev-error :which-key "previous error")
         "d" '(lsp-eslint-fix-all :which-key "eslint fix all")
         "s" '(save-buffer :which-key "save buffer")
         "c" '(org-capture :which-key "capture")))

     (general-define-key
      "C-M-j" 'counsel-switch-buffer
      "C-`" 'vterm-other-window
      "C-c a" 'org-agenda
      "C-x R" 'rename-buffer)

   #+end_src

** Reperirive commands
   [[https://github.com/abo-abo/hydra][Hydra]] is designed to setup for defining key binding for repetitive commands.

   #+begin_src emacs-lisp

     (use-package hydra)

   #+end_src

*** Text scale
    A hydra that is bound to =S t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

    #+begin_src emacs-lisp

      (defhydra hydra-text-scale (:timeout 4)
        "scale text"
        ("j" text-scale-decrease "decrease")
        ("k" text-scale-increase "increase")
        ("f" nil "finished" :exit t))

      (rune/leader-keys
        "as" '(hydra-text-scale/body :which-key "scale text"))

    #+end_src

*** Window resize

    #+begin_src emacs-lisp

      (defhydra hydra-window-resize (:timeout 4)
        "resize window"
        ("h" shrink-window-horizontally "move to the left")
        ("j" enlarge-window "move down")
        ("k" shrink-window "move up")
        ("l" enlarge-window-horizontally "move to the right")
        ("f" nil "finished" :exit t))

      (rune/leader-keys
        "w" '(hydra-window-resize/body :which-key "resize window"))

    #+end_src

** Key cast

   #+begin_src emacs-lisp

     (use-package keycast
       :config
       ;; This works with doom-modeline, inspired by this comment:
       ;; https://github.com/tarsius/keycast/issues/7#issuecomment-627604064
       (define-minor-mode keycast-mode
         "Show current command and its key binding in the mode line."
         :global t
         (if keycast-mode
             (add-hook 'pre-command-hook 'keycast--update t)
           (remove-hook 'pre-command-hook 'keycast--update)))
       (add-to-list 'global-mode-string '("" mode-line-keycast " "))
       (keycast-mode))

   #+end_src

** Command log
   Show all commands that was used

   #+Begin_src emacs-lisp

     (use-package command-log-mode
       :config
       (global-command-log-mode)
       :bind (("C-x p" . clm/toggle-command-log-buffer)))

   #+end_src
** Window management

   #+begin_src emacs-lisp

     (use-package winner-mode
       :ensure nil
       :bind (:map evil-window-map
                   ("u" . winner-undo)
                   ("U" . winner-redo))
       :config
       (winner-mode))

   #+end_src

* Org Mode
** Main Setup
   This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

   #+begin_src emacs-lisp

     (use-package org
       :config
       (setq org-hide-leading-stars t)
       (setq org-startup-folded t)
       (setq org-ellipsis " ▾")
       (setq org-hide-emphasis-markers t)
       (setq org-agenda-files '("~/Developer/org/"))
       (setq org-refile-targets
             '(("Archive.org" :maxlevel . 1)
               ("Tasks.org" :maxlevel . 1)))

       (setq org-todo-keywords
             '((sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
               (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))

       (setq org-tag-alist
             '((:startgroup) ; Put mutually exclusive tags here
               (:endgroup)
               ("@home" . ?H)
               ("@work" . ?W)
               ("@errand" . ?E)
               ("note" . ?n)
               ("idea" . ?i)))

       ;; Save Org buffers after refiling!
       (advice-add 'org-refile :after 'org-save-all-org-buffers)

       ;; Configure custom agenda views
       (setq org-agenda-custom-commands
             '(("d" "Dashboard"
                ((agenda "" ((org-deadline-warning-days 7)))
                 (todo "NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))
                 (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

               ("n" "Next Tasks"
                ((todo "NEXT"
                       ((org-agenda-overriding-header "Next Tasks")))))

               ("W" "Work Tasks" tags-todo "+@work")

               ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
                ((org-agenda-overriding-header "Low Effort Tasks")
                 (org-agenda-max-todos 20)
                 (org-agenda-files org-agenda-files)))

               ("w" "Workflow Status"
                ((todo "WAIT"
                       ((org-agenda-overriding-header "Waiting on External")
                        (org-agenda-files org-agenda-files)))
                 (todo "REVIEW"
                       ((org-agenda-overriding-header "In Review")
                        (org-agenda-files org-agenda-files)))
                 (todo "PLAN"
                       ((org-agenda-overriding-header "In Planning")
                        (org-agenda-todo-list-sublevels nil)
                        (org-agenda-files org-agenda-files)))
                 (todo "BACKLOG"
                       ((org-agenda-overriding-header "Project Backlog")
                        (org-agenda-todo-list-sublevels nil)
                        (org-agenda-files org-agenda-files)))
                 (todo "READY"
                       ((org-agenda-overriding-header "Ready for Work")
                        (org-agenda-files org-agenda-files)))
                 (todo "ACTIVE"
                       ((org-agenda-overriding-header "Active Projects")
                        (org-agenda-files org-agenda-files)))
                 (todo "COMPLETED"
                       ((org-agenda-overriding-header "Completed Projects")
                        (org-agenda-files org-agenda-files)))
                 (todo "CANC"
                       ((org-agenda-overriding-header "Cancelled Projects")
                        (org-agenda-files org-agenda-files)))))))

       (setq org-capture-templates
             '(("t" "Tasks / Projects")
               ("tt" "Task" entry (file+olp "~/Developer/org/Tasks.org" "Inbox")
                "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

               ("j" "Journal Entries")
               ("jj" "Journal" entry
                (file+olp+datetree "~/Developer/org/Journal.org")
                "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
                ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
                :clock-in :clock-resume
                :empty-lines 1)
               ("jm" "Meeting" entry
                (file+olp+datetree "~/Developer/org/Meetings.org")
                "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
                :clock-in :clock-resume
                :empty-lines 1)

               ("w" "Workflows")

               ("m" "Metrics Capture")
               ("mw" "Weight" table-line (file+headline "~/Developer/org/Metrics.org" "Weight")
                "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

       (setq org-agenda-start-with-log-mode t)
       (setq org-log-done 'note)
       (setq org-log-into-drawer t)
       (setq org-clock-into-drawer "TRACKING"))

     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))

   #+end_src

** Font size
   Different font size for different headers.

   #+begin_src emacs-lisp

     (dolist (face '((org-level-1 . 1.4)
                     (org-level-2 . 1.2)
                     (org-level-3 . 1.1)
                     (org-level-4 . 1.0)
                     (org-level-5 . 1.1)
                     (org-level-6 . 1.1)
                     (org-level-7 . 1.1)
                     (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil
                           :font "JetBrains Mono"
                           :weight 'regular
                           :height (cdr face)))

  #+end_src

** Nicier header bullets
   [[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.

   #+begin_src emacs-lisp

     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

   #+end_src

** Nicier list bullets

   #+begin_src emacs-lisp

     (font-lock-add-keywords 'org-mode
                             '(("^ *\\([-]\\) "
                                (0 (prog1 () (compose-region
                                              (match-beginning 1)
                                              (match-end 1) "•"))))))

   #+end_src

** Automaticaly tangle on save
   This snippet adds a hook to =org-mode= buffers so that pk/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

   #+begin_src emacs-lisp

     (defun pk/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
                           (expand-file-name "~/Developer/emacs/config.org"))
         ;; Dynamic scoping to the rescue
         (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pk/org-babel-tangle-config)))

   #+end_src
   
* File Management
** Dired

   #+begin_src emacs-lisp

     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho"))
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "h" 'dired-single-up-directory
         "l" 'dired-single-buffer))

     (use-package dired-single)

     (use-package all-the-icons-dired
       :hook (dired-mode . all-the-icons-dired-mode))


     (use-package dired-hide-dotfiles
       :hook (dired-mode . dired-hide-dotfiles-mode)
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "H" 'dired-hide-dotfiles-mode))

   #+end_src

* Terminal
** Vterm

   #+begin_src emacs-lisp

     (use-package vterm
       :commands vterm
       :config
       (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
       (setq vterm-shell "zsh")
       (setq vterm-max-scrollback 10000))

   #+end_src

* Development
** Projects
   [[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages. Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly. Also install `ripgreap` for fast search in the project files.

   #+begin_src emacs-lisp

     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom
       (projectile-completion-system 'ivy)
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/Developer/")
         (setq projectile-project-search-path '("~/Developer")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :after projectile
       :config
       (counsel-projectile-mode))

   #+end_src

** Magit
   [[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.
  NOTE: Make sure to configure a GitHub token before using this package!
   - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
   - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

   #+begin_src emacs-lisp

     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

     (use-package forge)

   #+end_src

** IDE
*** Language Server Protocol

    #+begin_src emacs-lisp

      (use-package lsp-mode
        :commands (lsp)
        :init
        (setq lsp-keymap-prefix "C-l")
        (setq lsp-eslint-enable t)
        (setq lsp-eslint-format t)
        (setq lsp-eslint-auto-fix-on-save t)
        (setq lsp-file-watch-ignored-directories (rx (or "node_modules" ".cache" ".log")))
        :config
        (lsp-enable-which-key-integration t))

      (use-package lsp-ui
        :config
        (setq lsp-ui-doc-position 'bottom)
        (setq lsp-ui-sideline-enable nil)
        (setq lsp-ui-sideline-show-hover nil)
        :hook (lsp-mode . lsp-ui-mode))

    #+end_src

*** Better completion

    #+begin_src emacs-lisp

      (use-package company
        :after lsp-mode
        :hook (lsp-mode . company-mode)
        :bind
        (:map company-active-map
              ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
              ("<tab>" . company-indent-or-complete-common))
        :custom
        (company-minimum-prefix-length 1)
        (company-idle-delay 0.0))

      (use-package company-box
        :hook (company-mode . company-box-mode))

    #+end_src

*** File navigator

    #+begin_src emacs-lisp

      (use-package lsp-treemacs
        :after lsp
        :bind (("C-l t" . treemacs)))

    #+end_src

*** Better symbol search

    #+begin_src emacs-lisp

      (use-package lsp-ivy)

    #+end_src

*** Commenting

    #+begin_src emacs-lisp

      (use-package evil-nerd-commenter
        :bind ("M-/" . evilnc-comment-or-uncomment-lines))

    #+end_src

*** Typescript/Javascript

    #+begin_src emacs-lisp
      (use-package nvm
        :defer t)

      (use-package typescript-mode
        :mode "\\.tsx?\\'"
        :hook (typescript-mode . lsp)
        :config
        (setq typescript-indent-level 2)
        :bind (("C-x =" . lsp-eslint-fix-all)))

      (use-package web-mode
        :mode
        ("\\.tsx\\'" . web-mode)
        ("\\.jsx\\'" . web-mode)
        :hook (web-mode . lsp)
        :config
        (setq-default web-mode-code-indent-offset 2)
        (setq-default web-mode-markup-indent-offset 2)
        (setq-default web-mode-attribute-indent-offset 2))

      (defun dw/set-js-indentation ()
        (setq js-indent-level 2)
        (setq evil-shift-width js-indent-level)
        (setq-default tab-width 2))

      (use-package js2-mode
        :mode "\\.jsx?\\'"
        :config
        ;; Use js2-mode for Node scripts
        (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

        ;; Don't use built-in syntax checking
        (setq js2-mode-show-strict-warnings nil)

        ;; Set up proper indentation in JavaScript and JSON files
        (add-hook 'js2-mode-hook #'dw/set-js-indentation)
        (add-hook 'json-mode-hook #'dw/set-js-indentation))

      (use-package graphql-mode)

      (use-package mmm-mode)

      (mmm-add-classes
       '((js-graphql
          :submode graphql-mode
          :face mmm-declaration-submode-face
          :front "[^a-zA-Z]gql`" ;; regex to find the opening tag
          :back "`"))) ;; regex to find the closing tag

      (mmm-add-mode-ext-class 'js-mode nil 'js-graphql)
      (mmm-add-mode-ext-class 'typescript-mode nil 'js-graphql)

      (setq mmm-global-mode 'maybe)
      ;; Optional configuration that hides the background color for a highlighted block
      ;; I find it useful for debugging emacs, but when actually coding I dont want so much emphasis on submodes
      (setq mmm-submode-decoration-level 0)

    #+end_src

*** Elm

    #+begin_src emacs-lisp

      (use-package elm-mode
        :mode
        ("\\.elm\\'" . elm-mode)
        :hook
        (elm-mode . lsp)
        (elm-mode . elm-format-on-save-mode)
        :config
        (setq elm-sort-imports-on-save t)
        (setq elm-format-on-save-mode t))

    #+end_src

    
